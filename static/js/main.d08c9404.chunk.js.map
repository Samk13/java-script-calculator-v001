{"version":3,"sources":["Components/CalcButtons.js","Components/Screen.js","Components/App.js","serviceWorker.js","index.js"],"names":["CalcButtons","sendToParent","_this","props","handleClick","name","react_default","a","createElement","className","onClick","this","React","Component","Screen","result","current","buttons","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","button","toConsumableArray","state","push","setState","_this2","Components_Screen","map","item","i","Components_CalcButtons","key","Boolean","window","location","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAmBeA,6MAdfC,aAAe,WACbC,EAAKC,MAAMC,YAAYF,EAAKC,MAAME,+EAKhC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,UAAQE,QAASC,KAAKV,aAAcQ,UAAU,OAAOE,KAAKR,MAAME,cAV9CO,IAAMC,WCgBjBC,mLATX,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,YAAOG,KAAKR,MAAMY,QAClBT,EAAAC,EAAAC,cAAA,SAAIG,KAAKR,MAAMa,iBALFJ,IAAMC,WCFrBI,EAAU,CAAC,IAAK,OAAK,IAAI,IAAI,IAAI,IAAI,IAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,KAkC1EC,cA3Bb,SAAAA,EAAYf,GAAM,IAAAD,EAAA,OAAAiB,OAAAC,EAAA,EAAAD,CAAAR,KAAAO,IAChBhB,EAAAiB,OAAAE,EAAA,EAAAF,CAAAR,KAAAQ,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAZ,KAAMR,KAMRC,YAAc,SAACoB,GACb,IAAMR,EAAOG,OAAAM,EAAA,EAAAN,CAAOjB,EAAKwB,MAAMV,SAC/BA,EAAQW,KAAKH,GACbtB,EAAK0B,SAAS,CAACZ,aARfd,EAAKwB,MAAM,CACTV,QAAQ,GACRD,OAAO,GAJOb,wEAgBV,IAAA2B,EAAAlB,KACN,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,4BACDF,EAAAC,EAAAC,cAACsB,EAAD,CAAQd,QAAWL,KAAKe,MAAMV,QAASD,OAASJ,KAAKe,MAAMX,SAC1DE,EAAQc,IAAI,SAACC,EAAOC,GAAR,OAAY3B,EAAAC,EAAAC,cAAC0B,EAAD,CAAa9B,YAAayB,EAAKzB,YAAa+B,IAAKF,EAAG5B,KAAM2B,cAtBxEpB,IAAMC,WCAJuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d08c9404.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass CalcButtons extends React.Component{\r\n\r\nsendToParent = ()=> {\r\n  this.props.handleClick(this.props.name)\r\n}\r\n\r\n\r\n  render(){\r\n    return(\r\n      <div className='CalcButtons'>\r\n        <button onClick={this.sendToParent} className='btn'>{this.props.name}</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CalcButtons;","import React from 'react';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Screen extends React.Component{\r\n  render(){\r\n    return(\r\n      <div className='screen'>\r\n        <span>{this.props.result}</span>\r\n        <p>{this.props.current}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Screen;","import React from 'react';\r\nimport CalcButtons from './CalcButtons'\r\nimport Screen from './Screen'\r\n\r\n\r\n\r\nconst buttons = ['0', 'Â±', '%','+','7','8','9', 'X','4','5','6','-','1','2','3','AC',',','=']\r\n\r\n\r\n\r\n\r\n\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      current:[],\r\n      result:0,\r\n    }\r\n  }\r\n  handleClick = (button)=>{\r\n    const current = [...this.state.current]\r\n    current.push(button)\r\n    this.setState({current})\r\n    \r\n\r\n  }\r\n\r\n\r\n  render(){\r\n    return(\r\n      <div className='App'>\r\n        <h1>Calculator APP</h1>\r\n       <Screen current = {this.state.current} result ={this.state.result}/>\r\n       {buttons.map((item , i)=><CalcButtons handleClick={this.handleClick} key={i} name={item}/>)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}